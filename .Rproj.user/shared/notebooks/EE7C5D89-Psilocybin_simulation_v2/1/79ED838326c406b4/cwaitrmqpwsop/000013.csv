"0","analyse_simulation <- function() {"
"0","  # Set random seed and number of participants"
"0","  set.seed(123)"
"0","  n <- 30  # number of participants"
"0",""
"0","    # Calculate the standard deviation of residuals"
"0","  residual_sd <- sqrt(503.70)"
"0","  # Step 1: Simulate wide data (placebo arm) with jitter for psilocybin arm"
"0","  wide_data <- ASC %>%"
"0","    pivot_wider(names_from = c(Simple_Complex, Condition),"
"0","                values_from = Average_Score,"
"0","                values_fill = list(Average_Score = 0)) %>%"
"0","    rename("
"0","      Simple_Flicker_Placebo = Simple_Flicker,"
"0","      Complex_Flicker_Placebo = Complex_Flicker,"
"0","      Simple_Ganzfeld_Placebo = Simple_Ganzfeld,"
"0","      Complex_Ganzfeld_Placebo = Complex_Ganzfeld"
"0","    ) %>%"
"0","    # Add jitter for psilocybin arm with values capped at 0 and 100"
"0","    mutate("
"0","      Simple_Flicker_Psilocybin = pmin(pmax(Simple_Flicker_Placebo + rnorm(n(), mean = 0, sd = residual_sd), 0), 100),"
"0","      Complex_Flicker_Psilocybin = pmin(pmax(Complex_Flicker_Placebo + rnorm(n(), mean = 0, sd = residual_sd), 0), 100),"
"0","      Simple_Ganzfeld_Psilocybin = pmin(pmax(Simple_Ganzfeld_Placebo + rnorm(n(), mean = 0, sd = residual_sd), 0), 100),"
"0","      Complex_Ganzfeld_Psilocybin = pmin(pmax(Complex_Ganzfeld_Placebo + rnorm(n(), mean = 0, sd = residual_sd), 0), 100)"
"0","    )"
"0",""
"0","  # Step 2: Calculate the correlation matrix for the data"
"0","  cor_matrix <- cor(wide_data %>%"
"0","                      dplyr::select("
"0","                        Simple_Flicker_Placebo, Simple_Ganzfeld_Placebo, "
"0","                        Complex_Flicker_Placebo, Complex_Ganzfeld_Placebo,"
"0","                        Simple_Flicker_Psilocybin, Simple_Ganzfeld_Psilocybin, "
"0","                        Complex_Flicker_Psilocybin, Complex_Ganzfeld_Psilocybin"
"0","                      ))"
"0","  "
"0","  # Step 3: Define means and standard deviations"
"0","  means <- c(ganzflicker_simple_mu_ASC, ganzfeld_simple_mu_ASC, ganzflicker_complex_mu_ASC, ganzfeld_complex_mu_ASC,"
"0","             est_mean_psilo_ganzflicker_simple_ASC, est_mean_psilo_ganzflicker_complex_ASC, est_mean_psilo_ganzfeld_simple_ASC, est_mean_psilo_ganzfeld_complex_ASC)"
"0","  "
"0","  sds <- c(ganzflicker_simple_sd_ASC, ganzfeld_simple_sd_ASC, ganzflicker_complex_sd_ASC, ganzfeld_complex_sd_ASC,"
"0","           ganzflicker_simple_sd_ASC, ganzfeld_simple_sd_ASC, ganzflicker_complex_sd_ASC, ganzfeld_complex_sd_ASC)"
"0","  "
"0","  # Step 4: Ensure the correlation matrix is positive definite"
"0","  cor_matrix <- as.matrix(nearPD(cor_matrix)$mat)"
"0","  "
"0","  # Step 5: Construct the covariance matrix"
"0","  cov_matrix <- diag(sds) %*% cor_matrix %*% diag(sds)"
"0","  "
"0","  # Step 6: Simulate data with truncated multivariate normal distribution"
"0","  simulated_data_ASC <- rtmvnorm(n = n,"
"0","                                 mu = means,"
"0","                                 sigma = cov_matrix,"
"0","                                 lb = rep(0, length(means)),"
"0","                                 ub = rep(100, length(means)))"
"0","  colnames(simulated_data_ASC) <- colnames(cor_matrix)"
"0","  "
"0","  # Step 7: Add participant numbers and convert to long format"
"0","  simulated_data_ASC_perp <- data.frame(Participant = 1:n, simulated_data_ASC)"
"0","  simulated_data_ASC_long <- simulated_data_ASC_perp %>%"
"0","    pivot_longer(cols = -Participant, "
"0","                 names_to = c(""Complexity"", ""Condition"", ""Drug""), "
"0","                 names_sep = ""_"", "
"0","                 values_to = ""ASC_Score"")"
"0","  "
"0","  # Step 8: Fit a linear mixed-effects model"
"0","  model_ASC <- lmer(ASC_Score ~ Condition + Complexity * Drug + (1 | Participant), data = simulated_data_ASC_long)"
"0","  model_summary <- summary(model_ASC)"
"0","  "
"0","  # Step 9: Extract and return model coefficients as a tidy data frame"
"0","  tidy_summary <- as.data.frame(model_summary$coefficients) %>%"
"0","    rownames_to_column(var = ""Term"") %>%"
"0","    dplyr::select(Term, Estimate, `Std. Error`, `Pr(>|t|)`)"
"0","  "
"0","  return(tidy_summary)"
"0","}"
"0",""
"0","# Call the function to execute the simulation and view the model summary"
"0","analyse_simulation()"
